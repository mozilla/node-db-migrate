#!/usr/bin/env node

var assert = require('assert');
var fs = require('fs');
var path = require('path');
var util = require('util');
var mkdirp = require('mkdirp');
var optimist = require('optimist');
var config = require('../lib/config.js');
var index = require('../index');
var log = require('../lib/log');

/*
process.on('uncaughtException', function(err) {
  log.error(err);
  process.exit(1);
});
*/

var argv = optimist
    .default({
      verbose: false,
      config: process.cwd() + '/database.json',
      'migrations-dir': process.cwd() + '/migrations' })
    .usage('Usage: db-migrate [up|down|create] migrationName [options]')

    .describe('env', 'The environment to run the migrations under (dev, test, prod).')
    .alias('e', 'env')
    .string('e')

    .describe('migrations-dir', 'The directory containing your migration files.')
    .alias('m', 'migrations-dir')
    .string('m')

    .describe('count', 'Max number of migrations to run.')
    .alias('c', 'count')
    .string('c')

    .describe('verbose', 'Verbose mode.')
    .alias('v', 'verbose')
    .boolean('v')

    .alias('h', 'help')
    .alias('h', '?')
    .boolean('h')

    .describe('config', 'Location of the database.json file.')
    .string('config')

    .argv;

if (argv.help || argv._.length == 0) {
  optimist.showHelp();
  process.exit(1);
}

global.verbose = argv.verbose;

function createMigrationDir(dir, callback) {
  fs.stat(dir, function(err, stat) {
    if (err) {
      mkdirp(dir, callback);
    } else {
      callback();
    }
  });
}

function loadConfig() {
  config.load(argv.config, argv.env);
  if(verbose) {
    var current = config.getCurrent();
    log.info("Using", current.env, "settings:", current.settings);
  }
}

function executeCreate() {
  if(argv._.length == 0) {
    log.error("'migrationName' is required.");
    optimist.showHelp();
    process.exit(1);
  }

  createMigrationDir(argv['migrations-dir'], function(err) {
    if (err) {
      log.error('Failed to create migration directory at ', argv['migrations-dir'], err);
      process.exit(1);
    }

    argv.title = argv._.shift();
    index.createMigration(argv.title, argv['migrations-dir'], function(err, migration) {
      assert.ifError(err);
      log.info(util.format('Created migration at %s', migration.path));
    });
  })
}

function executeUp() {
  index.up(config.getCurrent().settings, argv['migrations-dir'], argv.destination, argv.count);
}

function executeDown() {
  index.down(config.getCurrent().settings, argv['migrations-dir'], argv.destination, argv.count);
}

function onComplete(migrator, err) {
  migrator.driver.close();
  assert.ifError(err);
  log.info('Done');
}

function run() {
  var action = argv._.shift();
  switch(action) {
    case 'create':
      executeCreate();
      break;
    case 'up':
    case 'down':
      loadConfig();
      if(argv._.length > 0) {
        argv.destination = argv._.shift().toString();
      }
      if(action == 'up') {
        executeUp();
      } else {
        executeDown();
      }
      break;

    default:
      log.error('Invalid Action: Must be [up|down|create].');
      optimist.showHelp();
      process.exit(1);
      break;
  }
}

run();
